===============================================LARAVEL===============================================
1. Installation
composer create-project laravel/laravel mediaportal-backend
cd mediaportal-backend
php artisan serve --port=8000
php artisan serve

2. API Route
$ php artisan install:api

3. Seeders
php artisan make:seeder UserSeeder
php artisan make:seeder UserStatusSeeder
php artisan make:seeder RoleSeeder
php artisan make:seeder CountrySeeder
php artisan make:seeder MediaTagSeeder

4. Controllers
php artisan make:controller Main/DashboardController
php artisan make:controller Main/AuthController
php artisan make:controller Main/UserController --api --resource
php artisan make:controller Main/MediacategoryController --api --resource
php artisan make:controller Main/LiveStreamController --api --resource
php artisan make:controller Main/HomeController
php artisan make:controller Manage/OrganizationController --api --resource
php artisan make:controller Manage/ReportController --api --resource
php artisan make:controller Manage/PaymentMethodController --api --resource
php artisan make:controller Settings/ProfileMethodController --api --resource

5.Models
php artisan make:model Main/Media -m
php artisan make:model Main/MediaCategory -m
php artisan make:model Main/MediaTag -m
php artisan make:model Main/MediaStatus -m
php artisan make:model Main/LiveStreamStatus -m
php artisan make:model Main/MediaReaction -m
php artisan make:model Main/MediaTag -m
php artisan make:model Main/MediaComment -m
php artisan make:model Main/MediaHistory -m
php artisan make:model Main/Organization -m
php artisan make:model Main/MediaType -m
php artisan make:model Main/SpecialityUser -m
php artisan make:model Main/Payment -m
php artisan make:model Settings/Role -m
php artisan make:model Settings/UserStatus -m
php artisan make:model Settings/PaymentStatus -m
php artisan make:model Settings/OrganizationCategory -m
php artisan make:model Settings/Organization -m
php artisan make:model Settings/ContentCategory -m
php artisan make:model Settings/ContentStatus -m
php artisan make:model Other/County -m
php artisan make:model Other/Constituency -m
php artisan make:model Other/Ward -m

5. Migrate
php artisan migrate --path=/database/migrations/2024_05_25_203127_create_blog_posts_table.php

6. Mails
php artisan make:mail GenericMail

7. Jobs
php artisan queue:table

7. Middleware
i. Create
php artisan make:middleware AdminsOnly
php artisan make:middleware MentorsOnly
php artisan make:middleware AdminOrMentorsOnly
ii. Assigning Middleware To Routes: Within App\Http\Kernel class
protected $routeMiddleware = [
    //Add
    'adminonly' => \App\Http\Middleware\AdminsOnly::class,
    'mentoronly' => \App\Http\Middleware\MentorsOnly::class,
    'adminormentoronly' => \App\Http\Middleware\AdminOrMentorsOnly::class,
];

8. Services
Under app/Services/ create
VideoCipherService.php

9. Commands
php artisan make:command GetVideoStatus
composer install --optimize-autoloader --no-dev
composer uninstall --optimize-autoloader --no-dev

php artisan optimize:clear


10. Helpers
php artisan make:helper Helpers/MyHelper

===============================================./LARAVEL===============================================


===============================================NGINX===============================================
F. NGINX SERVER
1. Installation
-install NGINX:
$ sudo apt install nginx
-remove NGINX:
(
$ sudo apt remove nginx
- to purge NGINX (uninstall NGINX from the system):
$ sudo apt purge nginx
)
- reinstall NGINX.
$ sudo apt reinstall nginx

2. Configuring Laravel on Ubuntu 22.04 with nginix
- Provide the web server clients the write access to the data storage and cache directories
$ sudo chown -R www-data.www-data /var/www/html/mediaportal-backend/storage
$ sudo chown -R www-data:www-data /var/www/html/mediaportal-backend/storage
$ sudo chown -R www-data.www-data /var/www/html/mediaportal-backend/bootstrap/cache
$ sudo chown -R www-data:www-data /var/www/html/mediaportal-backend/bootstrap/cache
- Add a new virtual host config file to /etc/nginx/sites-available:
$ sudo vim /etc/nginx/sites-available/laravel_mediaportal_backend

- Open /etc/nginx/sites-available/laravel_mediaportal_backend then paste the code:
server {
 listen 80;
    server_name api.cms.konza.go.ke;
    root /var/www/html/mediaportal-backend/public;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    index index.html index.htm index.php;

    charset utf-8;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }


   # CORS for media files (HLS .m3u8 + .ts, plus mp4/webm)
    location ~* \.(m3u8|ts|mp4|webm|ogg)$ {
        add_header 'Access-Control-Allow-Origin' 'https://cms.konza.go.ke' always;
        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Range, Origin, Content-Type, Accept' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length, Content-Range' always;
        types { application/vnd.apple.mpegurl m3u8; video/mp2t ts; }
    }
    # Static assets (optional: cache for 30 days)
    location ~* \.(?:ico|css|js|gif|jpe?g|png|woff2?|ttf|svg|eot|mp4|webm)$ {
        expires 30d;
        access_log off;
        add_header Cache-Control "public";
    }


    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    error_page 404 /index.php;

    location ~ \.php$ {
        fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        include fastcgi_params;
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }
}
- Create a symbolic link in sites-enabled to enable the new virtual host config file:
$ sudo ln -s /etc/nginx/sites-available/laravel_mediaportal_backend /etc/nginx/sites-enabled/
OR (force)
$ sudo ln -sf /etc/nginx/sites-available/laravel_mediaportal_backend
- Ensure that there are no syntax problems in the configuration, use:
$ sudo nginx -t
- Reload Nginx to apply the changes and to do that paste the below code
$ sudo systemctl reload nginx

3. permissions
$ sudo chown -R www-data:www-data /var/www/html/mediaportal-backend/database
$ sudo chmod -R 775 /var/www/html/mediaportal-backend/
$ sudo php artisan config:clear
$ sudo php artisan cache:clear
$ sudo php artisan config:cache

4. Reference
https://technoracle.com/install-laravel-on-ubuntu-22-04/
===============================================./NGINX===============================================


===============================================RTMP_STREAMING_CONFIGURATION===============================================
- Install nginx with RTMP module (Ubuntu/Debian example)
sudo apt update
sudo apt install libnginx-mod-rtmp
sudo systemctl restart nginx

- Check
nginx -V 2>&1 | grep rtmp



1️⃣ Main /etc/nginx/nginx.conf
user www-data;
worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

# Include RTMP config (top-level rtmp block only)
include /etc/nginx/streaming_mediaportal_rtmp.conf;

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Include all HTTP server blocks
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/streaming_mediaportal_http.conf;  # HTTP server for HLS
}


2️⃣ sudo vim /etc/nginx/streaming_mediaportal_rtmp.conf
# Only RTMP here, top-level
rtmp {
    server {
        listen 1935;
        chunk_size 4096;

        application live {
            live on;
            record off;

            hls on;
            hls_path /var/www/hls;
            hls_fragment 6s;
            hls_playlist_length 30s;

            on_publish http://api.cms.konza.go.ke/api/streams/verify;
            on_publish_done http://api.cms.konza.go.ke/api/streams/stop;
        }
    }
}


3️⃣ /etc/nginx/streaming_mediaportal_http.conf
# Only HTTP server blocks here

server {
    listen 8080;
    server_name stream.cms.konza.go.ke www.stream.cms.konza.go.ke 102.210.148.48;

    location /hls {
        alias /var/www/hls;

        # Handle CORS properly
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, HEAD, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Range' always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods 'GET, HEAD, OPTIONS' always;
            add_header Access-Control-Allow-Headers 'Range' always;
            add_header Content-Length 0;
            return 204;
        }

        # Proper MIME types
        location ~* \.(m3u8)$ {
            add_header Cache-Control 'no-cache, no-store, must-revalidate' always;
            add_header Pragma 'no-cache' always;
            add_header Expires '-1' always;
            types {
                application/vnd.apple.mpegurl m3u8;
            }
        }

        location ~* \.(ts)$ {
            add_header Cache-Control 'public, max-age=3600' always;
            types {
                video/mp2t ts;
            }
        }
    }

    # Optional: Status page for monitoring
    location /stat {
        rtmp_stat all;
        rtmp_stat_stylesheet static/stat.xsl;
    }
}
sudo ln -sf /etc/nginx/streaming_mediaportal_http.conf /etc/nginx/sites-enabled/

4. After this setup:
sudo nginx -t
sudo systemctl start nginx

5. Make sure /var/www/hls exists
sudo mkdir -p /var/www/hls
sudo chown -R www-data:www-data /var/www/hls
sudo chmod -R 755 /var/www/hls

===============================================./RTMP_STREAMING_CONFIGURATION===============================================


===============================================FFmpeg_COMMAND_QUALITY_CONTROL_ON_STREAMING===============================================
1. Here’s a production-ready FFmpeg command you can run manually or as a systemd service
ffmpeg -i rtmp://localhost/live/streamkey \
  -c:v libx264 -preset veryfast -b:v 2500k -maxrate 2500k -bufsize 5000k \
  -vf "scale=-2:720" -c:a aac -b:a 128k -ac 2 \
  -f hls -hls_time 6 -hls_list_size 10 -hls_flags delete_segments \
  /var/www/hls/streamkey/index.m3u8


2. Create systemd service: /etc/systemd/system/ffmpeg-hls.service:
[Unit]
Description=FFmpeg HLS Transcoder
After=network.target

[Service]
ExecStart=/usr/bin/ffmpeg -i rtmp://stream.cms.konza.go.ke/live/streamkey \
  -c:v libx264 -preset veryfast -b:v 2500k -maxrate 2500k -bufsize 5000k \
  -vf "scale=-2:720" -c:a aac -b:a 128k -ac 2 \
  -f hls -hls_time 6 -hls_list_size 10 -hls_flags delete_segments \
  /var/www/hls/streamkey/index.m3u8
Restart=always
User=www-data
Group=www-data

[Install]
WantedBy=multi-user.target


3. Reload and start:
sudo systemctl daemon-reload
sudo systemctl enable ffmpeg-hls
sudo systemctl start ffmpeg-hls

===============================================./FFmpeg_COMMAND_QUALITY_CONTROL_ON_STREAMING===============================================



/etc/systemd/system/ffmpeg-hls.service

===============================================SQL===============================================
1. Launch MySQL
$ sudo mysql -u root -p OR sudo mysql -p -u root
$ sudo mysql -u admin -p OR sudo mysql -p -u admin

2. Show Database
$ SHOW DATABASES
3. Select DB
$ USE media_portal;

4. Table Manipulation
i. Create Column
ALTER TABLE payments ADD COLUMN convenience_fee VARCHAR(255) DEFAULT '0';
ALTER TABLE visits ADD COLUMN convenience_fee VARCHAR(255) DEFAULT '0';
===============================================./SQL===============================================


===============================================SUPERVISOR===============================================
E. SUPERVISOR
1. Install
- How to use supervisor to process jobs in Laravel in Linux Server
$ sudo apt-get install supervisor
$ sudo vi /etc/supervisor/conf.d/laravel-mediaportal-worker.conf
[program:laravel-mediaportal-worker]
process_name=%(program_name)s_%(process_num)02d
command=/usr/bin/php /var/www/html/mediaportal-backend/artisan queue:work database --sleep=3 --tries=3
autostart=true
autorestart=true
user=root
numprocs=5
redirect_stderr=true
stdout_logfile=/var/www/html/mediaportal-backend/storage/logs/worker.log

2. Use
- Press ESC
- Then :wq
$ sudo supervisorctl reread
$ sudo supervisorctl update
$ sudo supervisorctl start 'laravel-mediaportal-worker:*'
OR
$ sudo supervisorctl start laravel-mediaportal-worker.conf
$ supervisorctl restart laravel-mediaportal-worker:*

-Check if supervisor is running
$ ps aux | grep artisan

supervisorctl commands
sudo supervisorctl stop all
sudo supervisorctl reread
sudo supervisorctl update
sudo supervisorctl start all

Reference:
https://laravel.com/docs/6.x/queues#supervisor-configuration

3. Unistall
- remove the package
$ sudo apt-get remove supervisor
- remove the package and all config
$ sudo apt-get purge supervisor
===============================================./SUPERVISOR===============================================


===============================================CRON-JOBS===============================================
1. Change Timezone
-Add this to .env:
TIME_ZONE = 'put_your/timezone_here' e,g, 'Africa/Nairobi'

- And in /config/app.php change:
'timezone' => 'UTC',
to:
'timezone' => env('TIME_ZONE', 'UTC'),

2. Create and Customize command
php artisan make:command SendVisitReminder
php artisan make:command SendWeeklyReport
- In the handle() method, perform whatever action you intend it to perform
3. Test command
$ php artisan app:get-video-status
4. Reference
https://www.educative.io/answers/how-to-create-a-custom-artisan-command-in-laravel

5.  Scheduling the Commands
- routes/console.php
Schedule::command('app:get-video-status')->everyMinute();
;
6. Check Status
php artisan schedule:list

7.a. Using  Cron Job
- Add a Cron Job
crontab -e
- Add the following line to the file:
* * * * * cd /var/www/html/mediaportal-backend && php artisan schedule:run >> /dev/null 2>&1

- Verify Cron Job (ensure the cron job is set up correctly)
crontab -l
- Check Cron Logs/Monitor cron logs to verify that the job is being executed as expected
grep CRON /var/log/syslog OR/or grep cron /var/log/cron

OR

7.b. Using Supervisor
- Supervisor Configuration for Scheduler (laravel-mediaportal-backend-worker.conf)

$ sudo vi /etc/supervisor/conf.d/laravel-mediaportal-backend-worker.conf
[program:laravel-mediaportal-backend-worker]
process_name=%(program_name)s_%(process_num)02d
command=/usr/bin/php /var/www/html/mediaportal-backend/artisan queue:work database --sleep=3 --tries=3
autostart=true
autorestart=true
user=root
numprocs=5
redirect_stderr=true
stdout_logfile=/var/www/html/mediaportal-backend/storage/logs/worker.log

8. Update Supervisor and Start
sudo supervisorctl reread
sudo supervisorctl update
sudo supervisorctl start 'laravel-mediaportal-backend-worker.conf:*'
OR
$ sudo supervisorctl start laravel-mediaportal-backend-worker.conf
$ supervisorctl restart laravel-mediaportal-backend-worker:*

9. Verify Everything is Working
Check the log file (/var/www/html/mediaportal-backend/storage/logs/worker.log)
===============================================./CRON-JOBS===============================================


===============================================CERTBOT===============================================
I. INSTALL
1.Install snapd
$ sudo snap install core; sudo snap refresh core

2.Remove certbot-auto and any Certbot OS packages
$ sudo snap remove certbot
$ sudo apt-get remove certbot, sudo dnf remove certbot, or sudo yum remove certbot

3.Install Certbot
$ sudo apt  install certbot
$ sudo snap install --classic certbot

4.Prepare the Certbot command
$ sudo ln -s /snap/bin/certbot /usr/bin/certbot

5. Choose how you'd like to run Certbot
$ sudo certbot --nginx

6. Test automatic renewal
$ sudo certbot renew --dry-run

7. Confirm that Certbot worked
$ visit https://yourwebsite.com/

8.Reference
https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal

II. UNINSTALL
1. Clean up/delete certbot:
$ sudo certbot certificates
2. Will list certbot installed
$ sudo certbot delete
===============================================./CERTBOT===============================================


===============================================FFMPEG===============================================
1. Installation
$ sudo apt install ffmpeg -y

2. Check Version
/usr/bin/ffmpeg -version
$ which ffmpeg

3. Fix getFFmpegPath() for Ubuntu
private function getFFmpegPath(): string
{
    $possiblePaths = [
        env('FFMPEG_PATH'), // optionally set in .env
        '/usr/bin/ffmpeg',  // typical path on Ubuntu/Debian
        '/usr/local/bin/ffmpeg',
        'ffmpeg',           // rely on PATH
        'C:\\ffmpeg\\bin\\ffmpeg.exe', // Windows
        'C:\\Program Files\\ffmpeg\\bin\\ffmpeg.exe',
    ];

    foreach ($possiblePaths as $path) {
        if (!$path) continue;

        if ($path === 'ffmpeg') {
            exec('which ffmpeg 2>/dev/null', $output, $returnVar);
            if ($returnVar === 0 && !empty($output)) {
                return trim($output[0]); // full path
            }
        } elseif (file_exists($path)) {
            return $path;
        }
    }

    throw new Exception("FFmpeg not found. Please install FFmpeg and ensure it's accessible.");
}
===============================================./FFMPEG===============================================




 composer require dreamersdesire/laravel-live-streaming:dev-main
